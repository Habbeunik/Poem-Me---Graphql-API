// Code generated by Prisma (prisma@1.34.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  category: (where?: CategoryWhereInput) => Promise<boolean>;
  comment: (where?: CommentWhereInput) => Promise<boolean>;
  like: (where?: LikeWhereInput) => Promise<boolean>;
  poem: (where?: PoemWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  category: (where: CategoryWhereUniqueInput) => CategoryNullablePromise;
  categories: (args?: {
    where?: CategoryWhereInput;
    orderBy?: CategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Category>;
  categoriesConnection: (args?: {
    where?: CategoryWhereInput;
    orderBy?: CategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CategoryConnectionPromise;
  comment: (where: CommentWhereUniqueInput) => CommentNullablePromise;
  comments: (args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Comment>;
  commentsConnection: (args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CommentConnectionPromise;
  like: (where: LikeWhereUniqueInput) => LikeNullablePromise;
  likes: (args?: {
    where?: LikeWhereInput;
    orderBy?: LikeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Like>;
  likesConnection: (args?: {
    where?: LikeWhereInput;
    orderBy?: LikeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => LikeConnectionPromise;
  poem: (where: PoemWhereUniqueInput) => PoemNullablePromise;
  poems: (args?: {
    where?: PoemWhereInput;
    orderBy?: PoemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Poem>;
  poemsConnection: (args?: {
    where?: PoemWhereInput;
    orderBy?: PoemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PoemConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createCategory: (data: CategoryCreateInput) => CategoryPromise;
  updateCategory: (args: {
    data: CategoryUpdateInput;
    where: CategoryWhereUniqueInput;
  }) => CategoryPromise;
  updateManyCategories: (args: {
    data: CategoryUpdateManyMutationInput;
    where?: CategoryWhereInput;
  }) => BatchPayloadPromise;
  upsertCategory: (args: {
    where: CategoryWhereUniqueInput;
    create: CategoryCreateInput;
    update: CategoryUpdateInput;
  }) => CategoryPromise;
  deleteCategory: (where: CategoryWhereUniqueInput) => CategoryPromise;
  deleteManyCategories: (where?: CategoryWhereInput) => BatchPayloadPromise;
  createComment: (data: CommentCreateInput) => CommentPromise;
  updateComment: (args: {
    data: CommentUpdateInput;
    where: CommentWhereUniqueInput;
  }) => CommentPromise;
  updateManyComments: (args: {
    data: CommentUpdateManyMutationInput;
    where?: CommentWhereInput;
  }) => BatchPayloadPromise;
  upsertComment: (args: {
    where: CommentWhereUniqueInput;
    create: CommentCreateInput;
    update: CommentUpdateInput;
  }) => CommentPromise;
  deleteComment: (where: CommentWhereUniqueInput) => CommentPromise;
  deleteManyComments: (where?: CommentWhereInput) => BatchPayloadPromise;
  createLike: (data: LikeCreateInput) => LikePromise;
  updateLike: (args: {
    data: LikeUpdateInput;
    where: LikeWhereUniqueInput;
  }) => LikePromise;
  upsertLike: (args: {
    where: LikeWhereUniqueInput;
    create: LikeCreateInput;
    update: LikeUpdateInput;
  }) => LikePromise;
  deleteLike: (where: LikeWhereUniqueInput) => LikePromise;
  deleteManyLikes: (where?: LikeWhereInput) => BatchPayloadPromise;
  createPoem: (data: PoemCreateInput) => PoemPromise;
  updatePoem: (args: {
    data: PoemUpdateInput;
    where: PoemWhereUniqueInput;
  }) => PoemPromise;
  updateManyPoems: (args: {
    data: PoemUpdateManyMutationInput;
    where?: PoemWhereInput;
  }) => BatchPayloadPromise;
  upsertPoem: (args: {
    where: PoemWhereUniqueInput;
    create: PoemCreateInput;
    update: PoemUpdateInput;
  }) => PoemPromise;
  deletePoem: (where: PoemWhereUniqueInput) => PoemPromise;
  deleteManyPoems: (where?: PoemWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  category: (
    where?: CategorySubscriptionWhereInput
  ) => CategorySubscriptionPayloadSubscription;
  comment: (
    where?: CommentSubscriptionWhereInput
  ) => CommentSubscriptionPayloadSubscription;
  like: (
    where?: LikeSubscriptionWhereInput
  ) => LikeSubscriptionPayloadSubscription;
  poem: (
    where?: PoemSubscriptionWhereInput
  ) => PoemSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "authorName_ASC"
  | "authorName_DESC"
  | "avartar_ASC"
  | "avartar_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type CategoryOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type PoemOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "backgroundColor_ASC"
  | "backgroundColor_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "published_ASC"
  | "published_DESC";

export type LikeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type CommentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "text_ASC"
  | "text_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface UserUpdateWithWhereUniqueWithoutFollowersInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutFollowersDataInput;
}

export type CategoryWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  title?: Maybe<String>;
}>;

export interface CategoryCreateManyInput {
  create?: Maybe<CategoryCreateInput[] | CategoryCreateInput>;
  connect?: Maybe<CategoryWhereUniqueInput[] | CategoryWhereUniqueInput>;
}

export interface CommentUpdateManyWithWhereNestedInput {
  where: CommentScalarWhereInput;
  data: CommentUpdateManyDataInput;
}

export interface PoemCreateManyInput {
  create?: Maybe<PoemCreateInput[] | PoemCreateInput>;
  connect?: Maybe<PoemWhereUniqueInput[] | PoemWhereUniqueInput>;
}

export interface PoemUpdateWithoutAuthorDataInput {
  title?: Maybe<String>;
  verse?: Maybe<PoemUpdateverseInput>;
  backgroundColor?: Maybe<String>;
  likes?: Maybe<LikeUpdateManyWithoutPoemInput>;
  comments?: Maybe<CommentUpdateManyWithoutPoemInput>;
  published?: Maybe<Boolean>;
}

export interface PoemCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  verse?: Maybe<PoemCreateverseInput>;
  backgroundColor?: Maybe<String>;
  author: UserCreateOneWithoutPoemsInput;
  likes?: Maybe<LikeCreateManyWithoutPoemInput>;
  comments?: Maybe<CommentCreateManyWithoutPoemInput>;
  published?: Maybe<Boolean>;
}

export interface PoemSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PoemWhereInput>;
  AND?: Maybe<PoemSubscriptionWhereInput[] | PoemSubscriptionWhereInput>;
  OR?: Maybe<PoemSubscriptionWhereInput[] | PoemSubscriptionWhereInput>;
  NOT?: Maybe<PoemSubscriptionWhereInput[] | PoemSubscriptionWhereInput>;
}

export interface UserCreateOneWithoutPoemsInput {
  create?: Maybe<UserCreateWithoutPoemsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export type CommentWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserCreateWithoutPoemsInput {
  id?: Maybe<ID_Input>;
  email: String;
  password: String;
  authorName?: Maybe<String>;
  following?: Maybe<UserCreateManyWithoutFollowingInput>;
  followers?: Maybe<UserCreateManyWithoutFollowersInput>;
  avartar?: Maybe<String>;
  categories?: Maybe<CategoryCreateManyInput>;
  liked?: Maybe<PoemCreateManyInput>;
  bookmarks?: Maybe<PoemCreateManyInput>;
}

export interface CategorySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CategoryWhereInput>;
  AND?: Maybe<
    CategorySubscriptionWhereInput[] | CategorySubscriptionWhereInput
  >;
  OR?: Maybe<CategorySubscriptionWhereInput[] | CategorySubscriptionWhereInput>;
  NOT?: Maybe<
    CategorySubscriptionWhereInput[] | CategorySubscriptionWhereInput
  >;
}

export interface PoemCreateOneWithoutCommentsInput {
  create?: Maybe<PoemCreateWithoutCommentsInput>;
  connect?: Maybe<PoemWhereUniqueInput>;
}

export interface PoemWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  backgroundColor?: Maybe<String>;
  backgroundColor_not?: Maybe<String>;
  backgroundColor_in?: Maybe<String[] | String>;
  backgroundColor_not_in?: Maybe<String[] | String>;
  backgroundColor_lt?: Maybe<String>;
  backgroundColor_lte?: Maybe<String>;
  backgroundColor_gt?: Maybe<String>;
  backgroundColor_gte?: Maybe<String>;
  backgroundColor_contains?: Maybe<String>;
  backgroundColor_not_contains?: Maybe<String>;
  backgroundColor_starts_with?: Maybe<String>;
  backgroundColor_not_starts_with?: Maybe<String>;
  backgroundColor_ends_with?: Maybe<String>;
  backgroundColor_not_ends_with?: Maybe<String>;
  author?: Maybe<UserWhereInput>;
  likes_every?: Maybe<LikeWhereInput>;
  likes_some?: Maybe<LikeWhereInput>;
  likes_none?: Maybe<LikeWhereInput>;
  comments_every?: Maybe<CommentWhereInput>;
  comments_some?: Maybe<CommentWhereInput>;
  comments_none?: Maybe<CommentWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  published?: Maybe<Boolean>;
  published_not?: Maybe<Boolean>;
  AND?: Maybe<PoemWhereInput[] | PoemWhereInput>;
  OR?: Maybe<PoemWhereInput[] | PoemWhereInput>;
  NOT?: Maybe<PoemWhereInput[] | PoemWhereInput>;
}

export interface PoemCreateWithoutCommentsInput {
  id?: Maybe<ID_Input>;
  title: String;
  verse?: Maybe<PoemCreateverseInput>;
  backgroundColor?: Maybe<String>;
  author: UserCreateOneWithoutPoemsInput;
  likes?: Maybe<LikeCreateManyWithoutPoemInput>;
  published?: Maybe<Boolean>;
}

export interface CommentWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  poem?: Maybe<PoemWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  replies_every?: Maybe<CommentWhereInput>;
  replies_some?: Maybe<CommentWhereInput>;
  replies_none?: Maybe<CommentWhereInput>;
  AND?: Maybe<CommentWhereInput[] | CommentWhereInput>;
  OR?: Maybe<CommentWhereInput[] | CommentWhereInput>;
  NOT?: Maybe<CommentWhereInput[] | CommentWhereInput>;
}

export interface CommentUpdateInput {
  user?: Maybe<UserUpdateOneRequiredInput>;
  text?: Maybe<String>;
  poem?: Maybe<PoemUpdateOneRequiredWithoutCommentsInput>;
  replies?: Maybe<CommentUpdateManyInput>;
}

export interface CategoryWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CategoryWhereInput[] | CategoryWhereInput>;
  OR?: Maybe<CategoryWhereInput[] | CategoryWhereInput>;
  NOT?: Maybe<CategoryWhereInput[] | CategoryWhereInput>;
}

export interface UserUpdateOneRequiredInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface PoemUpdateManyMutationInput {
  title?: Maybe<String>;
  verse?: Maybe<PoemUpdateverseInput>;
  backgroundColor?: Maybe<String>;
  published?: Maybe<Boolean>;
}

export interface UserUpdateDataInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  authorName?: Maybe<String>;
  following?: Maybe<UserUpdateManyWithoutFollowingInput>;
  followers?: Maybe<UserUpdateManyWithoutFollowersInput>;
  poems?: Maybe<PoemUpdateManyWithoutAuthorInput>;
  avartar?: Maybe<String>;
  categories?: Maybe<CategoryUpdateManyInput>;
  liked?: Maybe<PoemUpdateManyInput>;
  bookmarks?: Maybe<PoemUpdateManyInput>;
}

export interface PoemUpsertWithoutLikesInput {
  update: PoemUpdateWithoutLikesDataInput;
  create: PoemCreateWithoutLikesInput;
}

export interface UserUpdateManyWithoutFollowingInput {
  create?: Maybe<
    UserCreateWithoutFollowingInput[] | UserCreateWithoutFollowingInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutFollowingInput[]
    | UserUpdateWithWhereUniqueWithoutFollowingInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutFollowingInput[]
    | UserUpsertWithWhereUniqueWithoutFollowingInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface PoemUpdateOneRequiredWithoutLikesInput {
  create?: Maybe<PoemCreateWithoutLikesInput>;
  update?: Maybe<PoemUpdateWithoutLikesDataInput>;
  upsert?: Maybe<PoemUpsertWithoutLikesInput>;
  connect?: Maybe<PoemWhereUniqueInput>;
}

export interface UserUpdateWithWhereUniqueWithoutFollowingInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutFollowingDataInput;
}

export type LikeWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserUpdateWithoutFollowingDataInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  authorName?: Maybe<String>;
  followers?: Maybe<UserUpdateManyWithoutFollowersInput>;
  poems?: Maybe<PoemUpdateManyWithoutAuthorInput>;
  avartar?: Maybe<String>;
  categories?: Maybe<CategoryUpdateManyInput>;
  liked?: Maybe<PoemUpdateManyInput>;
  bookmarks?: Maybe<PoemUpdateManyInput>;
}

export interface PoemCreateOneWithoutLikesInput {
  create?: Maybe<PoemCreateWithoutLikesInput>;
  connect?: Maybe<PoemWhereUniqueInput>;
}

export interface UserUpdateManyWithoutFollowersInput {
  create?: Maybe<
    UserCreateWithoutFollowersInput[] | UserCreateWithoutFollowersInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutFollowersInput[]
    | UserUpdateWithWhereUniqueWithoutFollowersInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutFollowersInput[]
    | UserUpsertWithWhereUniqueWithoutFollowersInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export type PoemWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface CommentUpsertWithWhereUniqueWithoutPoemInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateWithoutPoemDataInput;
  create: CommentCreateWithoutPoemInput;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface UserUpdateWithoutFollowersDataInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  authorName?: Maybe<String>;
  following?: Maybe<UserUpdateManyWithoutFollowingInput>;
  poems?: Maybe<PoemUpdateManyWithoutAuthorInput>;
  avartar?: Maybe<String>;
  categories?: Maybe<CategoryUpdateManyInput>;
  liked?: Maybe<PoemUpdateManyInput>;
  bookmarks?: Maybe<PoemUpdateManyInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
  authorName?: Maybe<String>;
}>;

export interface PoemUpdateManyWithoutAuthorInput {
  create?: Maybe<PoemCreateWithoutAuthorInput[] | PoemCreateWithoutAuthorInput>;
  delete?: Maybe<PoemWhereUniqueInput[] | PoemWhereUniqueInput>;
  connect?: Maybe<PoemWhereUniqueInput[] | PoemWhereUniqueInput>;
  set?: Maybe<PoemWhereUniqueInput[] | PoemWhereUniqueInput>;
  disconnect?: Maybe<PoemWhereUniqueInput[] | PoemWhereUniqueInput>;
  update?: Maybe<
    | PoemUpdateWithWhereUniqueWithoutAuthorInput[]
    | PoemUpdateWithWhereUniqueWithoutAuthorInput
  >;
  upsert?: Maybe<
    | PoemUpsertWithWhereUniqueWithoutAuthorInput[]
    | PoemUpsertWithWhereUniqueWithoutAuthorInput
  >;
  deleteMany?: Maybe<PoemScalarWhereInput[] | PoemScalarWhereInput>;
  updateMany?: Maybe<
    PoemUpdateManyWithWhereNestedInput[] | PoemUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface PoemUpdateWithWhereUniqueWithoutAuthorInput {
  where: PoemWhereUniqueInput;
  data: PoemUpdateWithoutAuthorDataInput;
}

export interface CategoryUpdateInput {
  title?: Maybe<String>;
}

export interface CommentUpdateManyDataInput {
  text?: Maybe<String>;
}

export interface UserUpsertWithWhereUniqueWithoutFollowersInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutFollowersDataInput;
  create: UserCreateWithoutFollowersInput;
}

export interface PoemUpdateverseInput {
  set?: Maybe<String[] | String>;
}

export interface CommentCreateInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneInput;
  text: String;
  poem: PoemCreateOneWithoutCommentsInput;
  replies?: Maybe<CommentCreateManyInput>;
}

export interface LikeUpdateManyWithoutPoemInput {
  create?: Maybe<LikeCreateWithoutPoemInput[] | LikeCreateWithoutPoemInput>;
  delete?: Maybe<LikeWhereUniqueInput[] | LikeWhereUniqueInput>;
  connect?: Maybe<LikeWhereUniqueInput[] | LikeWhereUniqueInput>;
  set?: Maybe<LikeWhereUniqueInput[] | LikeWhereUniqueInput>;
  disconnect?: Maybe<LikeWhereUniqueInput[] | LikeWhereUniqueInput>;
  update?: Maybe<
    | LikeUpdateWithWhereUniqueWithoutPoemInput[]
    | LikeUpdateWithWhereUniqueWithoutPoemInput
  >;
  upsert?: Maybe<
    | LikeUpsertWithWhereUniqueWithoutPoemInput[]
    | LikeUpsertWithWhereUniqueWithoutPoemInput
  >;
  deleteMany?: Maybe<LikeScalarWhereInput[] | LikeScalarWhereInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  email: String;
  password: String;
  authorName?: Maybe<String>;
  following?: Maybe<UserCreateManyWithoutFollowingInput>;
  followers?: Maybe<UserCreateManyWithoutFollowersInput>;
  poems?: Maybe<PoemCreateManyWithoutAuthorInput>;
  avartar?: Maybe<String>;
  categories?: Maybe<CategoryCreateManyInput>;
  liked?: Maybe<PoemCreateManyInput>;
  bookmarks?: Maybe<PoemCreateManyInput>;
}

export interface LikeUpdateWithWhereUniqueWithoutPoemInput {
  where: LikeWhereUniqueInput;
  data: LikeUpdateWithoutPoemDataInput;
}

export interface UserCreateWithoutFollowingInput {
  id?: Maybe<ID_Input>;
  email: String;
  password: String;
  authorName?: Maybe<String>;
  followers?: Maybe<UserCreateManyWithoutFollowersInput>;
  poems?: Maybe<PoemCreateManyWithoutAuthorInput>;
  avartar?: Maybe<String>;
  categories?: Maybe<CategoryCreateManyInput>;
  liked?: Maybe<PoemCreateManyInput>;
  bookmarks?: Maybe<PoemCreateManyInput>;
}

export interface LikeUpdateWithoutPoemDataInput {
  user?: Maybe<UserUpdateOneRequiredInput>;
}

export interface UserCreateWithoutFollowersInput {
  id?: Maybe<ID_Input>;
  email: String;
  password: String;
  authorName?: Maybe<String>;
  following?: Maybe<UserCreateManyWithoutFollowingInput>;
  poems?: Maybe<PoemCreateManyWithoutAuthorInput>;
  avartar?: Maybe<String>;
  categories?: Maybe<CategoryCreateManyInput>;
  liked?: Maybe<PoemCreateManyInput>;
  bookmarks?: Maybe<PoemCreateManyInput>;
}

export interface LikeUpsertWithWhereUniqueWithoutPoemInput {
  where: LikeWhereUniqueInput;
  update: LikeUpdateWithoutPoemDataInput;
  create: LikeCreateWithoutPoemInput;
}

export interface PoemCreateWithoutAuthorInput {
  id?: Maybe<ID_Input>;
  title: String;
  verse?: Maybe<PoemCreateverseInput>;
  backgroundColor?: Maybe<String>;
  likes?: Maybe<LikeCreateManyWithoutPoemInput>;
  comments?: Maybe<CommentCreateManyWithoutPoemInput>;
  published?: Maybe<Boolean>;
}

export interface LikeScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<LikeScalarWhereInput[] | LikeScalarWhereInput>;
  OR?: Maybe<LikeScalarWhereInput[] | LikeScalarWhereInput>;
  NOT?: Maybe<LikeScalarWhereInput[] | LikeScalarWhereInput>;
}

export interface LikeCreateManyWithoutPoemInput {
  create?: Maybe<LikeCreateWithoutPoemInput[] | LikeCreateWithoutPoemInput>;
  connect?: Maybe<LikeWhereUniqueInput[] | LikeWhereUniqueInput>;
}

export interface CommentUpdateManyWithoutPoemInput {
  create?: Maybe<
    CommentCreateWithoutPoemInput[] | CommentCreateWithoutPoemInput
  >;
  delete?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  set?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  disconnect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  update?: Maybe<
    | CommentUpdateWithWhereUniqueWithoutPoemInput[]
    | CommentUpdateWithWhereUniqueWithoutPoemInput
  >;
  upsert?: Maybe<
    | CommentUpsertWithWhereUniqueWithoutPoemInput[]
    | CommentUpsertWithWhereUniqueWithoutPoemInput
  >;
  deleteMany?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  updateMany?: Maybe<
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput
  >;
}

export interface CommentCreateManyWithoutPoemInput {
  create?: Maybe<
    CommentCreateWithoutPoemInput[] | CommentCreateWithoutPoemInput
  >;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
}

export interface CommentUpdateWithWhereUniqueWithoutPoemInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateWithoutPoemDataInput;
}

export interface CommentCreateManyInput {
  create?: Maybe<CommentCreateInput[] | CommentCreateInput>;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
}

export interface CommentUpdateWithoutPoemDataInput {
  user?: Maybe<UserUpdateOneRequiredInput>;
  text?: Maybe<String>;
  replies?: Maybe<CommentUpdateManyInput>;
}

export interface LikeSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<LikeWhereInput>;
  AND?: Maybe<LikeSubscriptionWhereInput[] | LikeSubscriptionWhereInput>;
  OR?: Maybe<LikeSubscriptionWhereInput[] | LikeSubscriptionWhereInput>;
  NOT?: Maybe<LikeSubscriptionWhereInput[] | LikeSubscriptionWhereInput>;
}

export interface CommentUpdateManyInput {
  create?: Maybe<CommentCreateInput[] | CommentCreateInput>;
  update?: Maybe<
    | CommentUpdateWithWhereUniqueNestedInput[]
    | CommentUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | CommentUpsertWithWhereUniqueNestedInput[]
    | CommentUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  set?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  disconnect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  deleteMany?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  updateMany?: Maybe<
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput
  >;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  authorName?: Maybe<String>;
  authorName_not?: Maybe<String>;
  authorName_in?: Maybe<String[] | String>;
  authorName_not_in?: Maybe<String[] | String>;
  authorName_lt?: Maybe<String>;
  authorName_lte?: Maybe<String>;
  authorName_gt?: Maybe<String>;
  authorName_gte?: Maybe<String>;
  authorName_contains?: Maybe<String>;
  authorName_not_contains?: Maybe<String>;
  authorName_starts_with?: Maybe<String>;
  authorName_not_starts_with?: Maybe<String>;
  authorName_ends_with?: Maybe<String>;
  authorName_not_ends_with?: Maybe<String>;
  following_every?: Maybe<UserWhereInput>;
  following_some?: Maybe<UserWhereInput>;
  following_none?: Maybe<UserWhereInput>;
  followers_every?: Maybe<UserWhereInput>;
  followers_some?: Maybe<UserWhereInput>;
  followers_none?: Maybe<UserWhereInput>;
  poems_every?: Maybe<PoemWhereInput>;
  poems_some?: Maybe<PoemWhereInput>;
  poems_none?: Maybe<PoemWhereInput>;
  avartar?: Maybe<String>;
  avartar_not?: Maybe<String>;
  avartar_in?: Maybe<String[] | String>;
  avartar_not_in?: Maybe<String[] | String>;
  avartar_lt?: Maybe<String>;
  avartar_lte?: Maybe<String>;
  avartar_gt?: Maybe<String>;
  avartar_gte?: Maybe<String>;
  avartar_contains?: Maybe<String>;
  avartar_not_contains?: Maybe<String>;
  avartar_starts_with?: Maybe<String>;
  avartar_not_starts_with?: Maybe<String>;
  avartar_ends_with?: Maybe<String>;
  avartar_not_ends_with?: Maybe<String>;
  categories_every?: Maybe<CategoryWhereInput>;
  categories_some?: Maybe<CategoryWhereInput>;
  categories_none?: Maybe<CategoryWhereInput>;
  liked_every?: Maybe<PoemWhereInput>;
  liked_some?: Maybe<PoemWhereInput>;
  liked_none?: Maybe<PoemWhereInput>;
  bookmarks_every?: Maybe<PoemWhereInput>;
  bookmarks_some?: Maybe<PoemWhereInput>;
  bookmarks_none?: Maybe<PoemWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface CommentUpdateWithWhereUniqueNestedInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateDataInput;
}

export interface UserUpdateManyMutationInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  authorName?: Maybe<String>;
  avartar?: Maybe<String>;
}

export interface CommentUpdateDataInput {
  user?: Maybe<UserUpdateOneRequiredInput>;
  text?: Maybe<String>;
  poem?: Maybe<PoemUpdateOneRequiredWithoutCommentsInput>;
  replies?: Maybe<CommentUpdateManyInput>;
}

export interface PoemUpdateInput {
  title?: Maybe<String>;
  verse?: Maybe<PoemUpdateverseInput>;
  backgroundColor?: Maybe<String>;
  author?: Maybe<UserUpdateOneRequiredWithoutPoemsInput>;
  likes?: Maybe<LikeUpdateManyWithoutPoemInput>;
  comments?: Maybe<CommentUpdateManyWithoutPoemInput>;
  published?: Maybe<Boolean>;
}

export interface PoemUpdateOneRequiredWithoutCommentsInput {
  create?: Maybe<PoemCreateWithoutCommentsInput>;
  update?: Maybe<PoemUpdateWithoutCommentsDataInput>;
  upsert?: Maybe<PoemUpsertWithoutCommentsInput>;
  connect?: Maybe<PoemWhereUniqueInput>;
}

export interface LikeUpdateInput {
  user?: Maybe<UserUpdateOneRequiredInput>;
  poem?: Maybe<PoemUpdateOneRequiredWithoutLikesInput>;
}

export interface PoemUpdateWithoutCommentsDataInput {
  title?: Maybe<String>;
  verse?: Maybe<PoemUpdateverseInput>;
  backgroundColor?: Maybe<String>;
  author?: Maybe<UserUpdateOneRequiredWithoutPoemsInput>;
  likes?: Maybe<LikeUpdateManyWithoutPoemInput>;
  published?: Maybe<Boolean>;
}

export interface LikeCreateInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneInput;
  poem: PoemCreateOneWithoutLikesInput;
}

export interface UserUpdateOneRequiredWithoutPoemsInput {
  create?: Maybe<UserCreateWithoutPoemsInput>;
  update?: Maybe<UserUpdateWithoutPoemsDataInput>;
  upsert?: Maybe<UserUpsertWithoutPoemsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpsertWithWhereUniqueWithoutFollowingInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutFollowingDataInput;
  create: UserCreateWithoutFollowingInput;
}

export interface UserUpdateWithoutPoemsDataInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  authorName?: Maybe<String>;
  following?: Maybe<UserUpdateManyWithoutFollowingInput>;
  followers?: Maybe<UserUpdateManyWithoutFollowersInput>;
  avartar?: Maybe<String>;
  categories?: Maybe<CategoryUpdateManyInput>;
  liked?: Maybe<PoemUpdateManyInput>;
  bookmarks?: Maybe<PoemUpdateManyInput>;
}

export interface UserScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  authorName?: Maybe<String>;
  authorName_not?: Maybe<String>;
  authorName_in?: Maybe<String[] | String>;
  authorName_not_in?: Maybe<String[] | String>;
  authorName_lt?: Maybe<String>;
  authorName_lte?: Maybe<String>;
  authorName_gt?: Maybe<String>;
  authorName_gte?: Maybe<String>;
  authorName_contains?: Maybe<String>;
  authorName_not_contains?: Maybe<String>;
  authorName_starts_with?: Maybe<String>;
  authorName_not_starts_with?: Maybe<String>;
  authorName_ends_with?: Maybe<String>;
  authorName_not_ends_with?: Maybe<String>;
  avartar?: Maybe<String>;
  avartar_not?: Maybe<String>;
  avartar_in?: Maybe<String[] | String>;
  avartar_not_in?: Maybe<String[] | String>;
  avartar_lt?: Maybe<String>;
  avartar_lte?: Maybe<String>;
  avartar_gt?: Maybe<String>;
  avartar_gte?: Maybe<String>;
  avartar_contains?: Maybe<String>;
  avartar_not_contains?: Maybe<String>;
  avartar_starts_with?: Maybe<String>;
  avartar_not_starts_with?: Maybe<String>;
  avartar_ends_with?: Maybe<String>;
  avartar_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  OR?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  NOT?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
}

export interface CategoryUpdateManyInput {
  create?: Maybe<CategoryCreateInput[] | CategoryCreateInput>;
  update?: Maybe<
    | CategoryUpdateWithWhereUniqueNestedInput[]
    | CategoryUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | CategoryUpsertWithWhereUniqueNestedInput[]
    | CategoryUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<CategoryWhereUniqueInput[] | CategoryWhereUniqueInput>;
  connect?: Maybe<CategoryWhereUniqueInput[] | CategoryWhereUniqueInput>;
  set?: Maybe<CategoryWhereUniqueInput[] | CategoryWhereUniqueInput>;
  disconnect?: Maybe<CategoryWhereUniqueInput[] | CategoryWhereUniqueInput>;
  deleteMany?: Maybe<CategoryScalarWhereInput[] | CategoryScalarWhereInput>;
  updateMany?: Maybe<
    | CategoryUpdateManyWithWhereNestedInput[]
    | CategoryUpdateManyWithWhereNestedInput
  >;
}

export interface CategoryUpdateManyMutationInput {
  title?: Maybe<String>;
}

export interface CategoryUpdateWithWhereUniqueNestedInput {
  where: CategoryWhereUniqueInput;
  data: CategoryUpdateDataInput;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface CategoryUpdateDataInput {
  title?: Maybe<String>;
}

export interface UserCreateManyWithoutFollowersInput {
  create?: Maybe<
    UserCreateWithoutFollowersInput[] | UserCreateWithoutFollowersInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface CategoryUpsertWithWhereUniqueNestedInput {
  where: CategoryWhereUniqueInput;
  update: CategoryUpdateDataInput;
  create: CategoryCreateInput;
}

export interface PoemCreateverseInput {
  set?: Maybe<String[] | String>;
}

export interface CategoryScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CategoryScalarWhereInput[] | CategoryScalarWhereInput>;
  OR?: Maybe<CategoryScalarWhereInput[] | CategoryScalarWhereInput>;
  NOT?: Maybe<CategoryScalarWhereInput[] | CategoryScalarWhereInput>;
}

export interface CommentCreateWithoutPoemInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneInput;
  text: String;
  replies?: Maybe<CommentCreateManyInput>;
}

export interface CategoryUpdateManyWithWhereNestedInput {
  where: CategoryScalarWhereInput;
  data: CategoryUpdateManyDataInput;
}

export interface CommentSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CommentWhereInput>;
  AND?: Maybe<CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput>;
  OR?: Maybe<CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput>;
  NOT?: Maybe<CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput>;
}

export interface CategoryUpdateManyDataInput {
  title?: Maybe<String>;
}

export interface UserUpdateInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  authorName?: Maybe<String>;
  following?: Maybe<UserUpdateManyWithoutFollowingInput>;
  followers?: Maybe<UserUpdateManyWithoutFollowersInput>;
  poems?: Maybe<PoemUpdateManyWithoutAuthorInput>;
  avartar?: Maybe<String>;
  categories?: Maybe<CategoryUpdateManyInput>;
  liked?: Maybe<PoemUpdateManyInput>;
  bookmarks?: Maybe<PoemUpdateManyInput>;
}

export interface PoemUpdateManyInput {
  create?: Maybe<PoemCreateInput[] | PoemCreateInput>;
  update?: Maybe<
    | PoemUpdateWithWhereUniqueNestedInput[]
    | PoemUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | PoemUpsertWithWhereUniqueNestedInput[]
    | PoemUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<PoemWhereUniqueInput[] | PoemWhereUniqueInput>;
  connect?: Maybe<PoemWhereUniqueInput[] | PoemWhereUniqueInput>;
  set?: Maybe<PoemWhereUniqueInput[] | PoemWhereUniqueInput>;
  disconnect?: Maybe<PoemWhereUniqueInput[] | PoemWhereUniqueInput>;
  deleteMany?: Maybe<PoemScalarWhereInput[] | PoemScalarWhereInput>;
  updateMany?: Maybe<
    PoemUpdateManyWithWhereNestedInput[] | PoemUpdateManyWithWhereNestedInput
  >;
}

export interface PoemCreateWithoutLikesInput {
  id?: Maybe<ID_Input>;
  title: String;
  verse?: Maybe<PoemCreateverseInput>;
  backgroundColor?: Maybe<String>;
  author: UserCreateOneWithoutPoemsInput;
  comments?: Maybe<CommentCreateManyWithoutPoemInput>;
  published?: Maybe<Boolean>;
}

export interface PoemUpdateWithWhereUniqueNestedInput {
  where: PoemWhereUniqueInput;
  data: PoemUpdateDataInput;
}

export interface UserUpdateManyDataInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  authorName?: Maybe<String>;
  avartar?: Maybe<String>;
}

export interface PoemUpdateDataInput {
  title?: Maybe<String>;
  verse?: Maybe<PoemUpdateverseInput>;
  backgroundColor?: Maybe<String>;
  author?: Maybe<UserUpdateOneRequiredWithoutPoemsInput>;
  likes?: Maybe<LikeUpdateManyWithoutPoemInput>;
  comments?: Maybe<CommentUpdateManyWithoutPoemInput>;
  published?: Maybe<Boolean>;
}

export interface PoemUpsertWithWhereUniqueWithoutAuthorInput {
  where: PoemWhereUniqueInput;
  update: PoemUpdateWithoutAuthorDataInput;
  create: PoemCreateWithoutAuthorInput;
}

export interface PoemUpsertWithWhereUniqueNestedInput {
  where: PoemWhereUniqueInput;
  update: PoemUpdateDataInput;
  create: PoemCreateInput;
}

export interface PoemCreateManyWithoutAuthorInput {
  create?: Maybe<PoemCreateWithoutAuthorInput[] | PoemCreateWithoutAuthorInput>;
  connect?: Maybe<PoemWhereUniqueInput[] | PoemWhereUniqueInput>;
}

export interface PoemScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  backgroundColor?: Maybe<String>;
  backgroundColor_not?: Maybe<String>;
  backgroundColor_in?: Maybe<String[] | String>;
  backgroundColor_not_in?: Maybe<String[] | String>;
  backgroundColor_lt?: Maybe<String>;
  backgroundColor_lte?: Maybe<String>;
  backgroundColor_gt?: Maybe<String>;
  backgroundColor_gte?: Maybe<String>;
  backgroundColor_contains?: Maybe<String>;
  backgroundColor_not_contains?: Maybe<String>;
  backgroundColor_starts_with?: Maybe<String>;
  backgroundColor_not_starts_with?: Maybe<String>;
  backgroundColor_ends_with?: Maybe<String>;
  backgroundColor_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  published?: Maybe<Boolean>;
  published_not?: Maybe<Boolean>;
  AND?: Maybe<PoemScalarWhereInput[] | PoemScalarWhereInput>;
  OR?: Maybe<PoemScalarWhereInput[] | PoemScalarWhereInput>;
  NOT?: Maybe<PoemScalarWhereInput[] | PoemScalarWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface PoemUpdateManyWithWhereNestedInput {
  where: PoemScalarWhereInput;
  data: PoemUpdateManyDataInput;
}

export interface PoemUpdateWithoutLikesDataInput {
  title?: Maybe<String>;
  verse?: Maybe<PoemUpdateverseInput>;
  backgroundColor?: Maybe<String>;
  author?: Maybe<UserUpdateOneRequiredWithoutPoemsInput>;
  comments?: Maybe<CommentUpdateManyWithoutPoemInput>;
  published?: Maybe<Boolean>;
}

export interface PoemUpdateManyDataInput {
  title?: Maybe<String>;
  verse?: Maybe<PoemUpdateverseInput>;
  backgroundColor?: Maybe<String>;
  published?: Maybe<Boolean>;
}

export interface CategoryCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
}

export interface CommentScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  OR?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  NOT?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
}

export interface CommentUpsertWithWhereUniqueNestedInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateDataInput;
  create: CommentCreateInput;
}

export interface PoemUpsertWithoutCommentsInput {
  update: PoemUpdateWithoutCommentsDataInput;
  create: PoemCreateWithoutCommentsInput;
}

export interface UserUpsertWithoutPoemsInput {
  update: UserUpdateWithoutPoemsDataInput;
  create: UserCreateWithoutPoemsInput;
}

export interface UserCreateManyWithoutFollowingInput {
  create?: Maybe<
    UserCreateWithoutFollowingInput[] | UserCreateWithoutFollowingInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface CommentUpdateManyMutationInput {
  text?: Maybe<String>;
}

export interface LikeWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  poem?: Maybe<PoemWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<LikeWhereInput[] | LikeWhereInput>;
  OR?: Maybe<LikeWhereInput[] | LikeWhereInput>;
  NOT?: Maybe<LikeWhereInput[] | LikeWhereInput>;
}

export interface LikeCreateWithoutPoemInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  email: String;
  password: String;
  authorName?: String;
  avartar?: String;
  createdAt?: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  authorName: () => Promise<String>;
  avartar: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  authorName: () => Promise<AsyncIterator<String>>;
  avartar: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CategoryConnection {
  pageInfo: PageInfo;
  edges: CategoryEdge[];
}

export interface CategoryConnectionPromise
  extends Promise<CategoryConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CategoryEdge>>() => T;
  aggregate: <T = AggregateCategoryPromise>() => T;
}

export interface CategoryConnectionSubscription
  extends Promise<AsyncIterator<CategoryConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CategoryEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCategorySubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface Like {
  id: ID_Output;
  createdAt: DateTimeOutput;
}

export interface LikePromise extends Promise<Like>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  poem: <T = PoemPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface LikeSubscription
  extends Promise<AsyncIterator<Like>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  poem: <T = PoemSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface LikeNullablePromise
  extends Promise<Like | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  poem: <T = PoemPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface CategoryEdge {
  node: Category;
  cursor: String;
}

export interface CategoryEdgePromise
  extends Promise<CategoryEdge>,
    Fragmentable {
  node: <T = CategoryPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CategoryEdgeSubscription
  extends Promise<AsyncIterator<CategoryEdge>>,
    Fragmentable {
  node: <T = CategorySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface Poem {
  id: ID_Output;
  title: String;
  verse: String[];
  backgroundColor?: String;
  createdAt: DateTimeOutput;
  published: Boolean;
}

export interface PoemPromise extends Promise<Poem>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  verse: () => Promise<String[]>;
  backgroundColor: () => Promise<String>;
  author: <T = UserPromise>() => T;
  likes: <T = FragmentableArray<Like>>(args?: {
    where?: LikeWhereInput;
    orderBy?: LikeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  published: () => Promise<Boolean>;
}

export interface PoemSubscription
  extends Promise<AsyncIterator<Poem>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  verse: () => Promise<AsyncIterator<String[]>>;
  backgroundColor: () => Promise<AsyncIterator<String>>;
  author: <T = UserSubscription>() => T;
  likes: <T = Promise<AsyncIterator<LikeSubscription>>>(args?: {
    where?: LikeWhereInput;
    orderBy?: LikeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  comments: <T = Promise<AsyncIterator<CommentSubscription>>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  published: () => Promise<AsyncIterator<Boolean>>;
}

export interface PoemNullablePromise
  extends Promise<Poem | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  verse: () => Promise<String[]>;
  backgroundColor: () => Promise<String>;
  author: <T = UserPromise>() => T;
  likes: <T = FragmentableArray<Like>>(args?: {
    where?: LikeWhereInput;
    orderBy?: LikeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  published: () => Promise<Boolean>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PoemPreviousValues {
  id: ID_Output;
  title: String;
  verse: String[];
  backgroundColor?: String;
  createdAt: DateTimeOutput;
  published: Boolean;
}

export interface PoemPreviousValuesPromise
  extends Promise<PoemPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  verse: () => Promise<String[]>;
  backgroundColor: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  published: () => Promise<Boolean>;
}

export interface PoemPreviousValuesSubscription
  extends Promise<AsyncIterator<PoemPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  verse: () => Promise<AsyncIterator<String[]>>;
  backgroundColor: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  published: () => Promise<AsyncIterator<Boolean>>;
}

export interface AggregatePoem {
  count: Int;
}

export interface AggregatePoemPromise
  extends Promise<AggregatePoem>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePoemSubscription
  extends Promise<AsyncIterator<AggregatePoem>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface User {
  id: ID_Output;
  email: String;
  password: String;
  authorName?: String;
  avartar?: String;
  createdAt?: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  authorName: () => Promise<String>;
  following: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  followers: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  poems: <T = FragmentableArray<Poem>>(args?: {
    where?: PoemWhereInput;
    orderBy?: PoemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  avartar: () => Promise<String>;
  categories: <T = FragmentableArray<Category>>(args?: {
    where?: CategoryWhereInput;
    orderBy?: CategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  liked: <T = FragmentableArray<Poem>>(args?: {
    where?: PoemWhereInput;
    orderBy?: PoemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  bookmarks: <T = FragmentableArray<Poem>>(args?: {
    where?: PoemWhereInput;
    orderBy?: PoemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  authorName: () => Promise<AsyncIterator<String>>;
  following: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  followers: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  poems: <T = Promise<AsyncIterator<PoemSubscription>>>(args?: {
    where?: PoemWhereInput;
    orderBy?: PoemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  avartar: () => Promise<AsyncIterator<String>>;
  categories: <T = Promise<AsyncIterator<CategorySubscription>>>(args?: {
    where?: CategoryWhereInput;
    orderBy?: CategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  liked: <T = Promise<AsyncIterator<PoemSubscription>>>(args?: {
    where?: PoemWhereInput;
    orderBy?: PoemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  bookmarks: <T = Promise<AsyncIterator<PoemSubscription>>>(args?: {
    where?: PoemWhereInput;
    orderBy?: PoemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  authorName: () => Promise<String>;
  following: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  followers: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  poems: <T = FragmentableArray<Poem>>(args?: {
    where?: PoemWhereInput;
    orderBy?: PoemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  avartar: () => Promise<String>;
  categories: <T = FragmentableArray<Category>>(args?: {
    where?: CategoryWhereInput;
    orderBy?: CategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  liked: <T = FragmentableArray<Poem>>(args?: {
    where?: PoemWhereInput;
    orderBy?: PoemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  bookmarks: <T = FragmentableArray<Poem>>(args?: {
    where?: PoemWhereInput;
    orderBy?: PoemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface PoemConnection {
  pageInfo: PageInfo;
  edges: PoemEdge[];
}

export interface PoemConnectionPromise
  extends Promise<PoemConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PoemEdge>>() => T;
  aggregate: <T = AggregatePoemPromise>() => T;
}

export interface PoemConnectionSubscription
  extends Promise<AsyncIterator<PoemConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PoemEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePoemSubscription>() => T;
}

export interface PoemSubscriptionPayload {
  mutation: MutationType;
  node: Poem;
  updatedFields: String[];
  previousValues: PoemPreviousValues;
}

export interface PoemSubscriptionPayloadPromise
  extends Promise<PoemSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PoemPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PoemPreviousValuesPromise>() => T;
}

export interface PoemSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PoemSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PoemSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PoemPreviousValuesSubscription>() => T;
}

export interface LikeEdge {
  node: Like;
  cursor: String;
}

export interface LikeEdgePromise extends Promise<LikeEdge>, Fragmentable {
  node: <T = LikePromise>() => T;
  cursor: () => Promise<String>;
}

export interface LikeEdgeSubscription
  extends Promise<AsyncIterator<LikeEdge>>,
    Fragmentable {
  node: <T = LikeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CategorySubscriptionPayload {
  mutation: MutationType;
  node: Category;
  updatedFields: String[];
  previousValues: CategoryPreviousValues;
}

export interface CategorySubscriptionPayloadPromise
  extends Promise<CategorySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CategoryPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CategoryPreviousValuesPromise>() => T;
}

export interface CategorySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CategorySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CategorySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CategoryPreviousValuesSubscription>() => T;
}

export interface AggregateComment {
  count: Int;
}

export interface AggregateCommentPromise
  extends Promise<AggregateComment>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCommentSubscription
  extends Promise<AsyncIterator<AggregateComment>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CategoryPreviousValues {
  id: ID_Output;
  title: String;
  createdAt: DateTimeOutput;
}

export interface CategoryPreviousValuesPromise
  extends Promise<CategoryPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface CategoryPreviousValuesSubscription
  extends Promise<AsyncIterator<CategoryPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CommentConnection {
  pageInfo: PageInfo;
  edges: CommentEdge[];
}

export interface CommentConnectionPromise
  extends Promise<CommentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CommentEdge>>() => T;
  aggregate: <T = AggregateCommentPromise>() => T;
}

export interface CommentConnectionSubscription
  extends Promise<AsyncIterator<CommentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CommentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCommentSubscription>() => T;
}

export interface Comment {
  id: ID_Output;
  text: String;
  createdAt?: DateTimeOutput;
}

export interface CommentPromise extends Promise<Comment>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  text: () => Promise<String>;
  poem: <T = PoemPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  replies: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface CommentSubscription
  extends Promise<AsyncIterator<Comment>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  text: () => Promise<AsyncIterator<String>>;
  poem: <T = PoemSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  replies: <T = Promise<AsyncIterator<CommentSubscription>>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface CommentNullablePromise
  extends Promise<Comment | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  text: () => Promise<String>;
  poem: <T = PoemPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  replies: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CommentSubscriptionPayload {
  mutation: MutationType;
  node: Comment;
  updatedFields: String[];
  previousValues: CommentPreviousValues;
}

export interface CommentSubscriptionPayloadPromise
  extends Promise<CommentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CommentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CommentPreviousValuesPromise>() => T;
}

export interface CommentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CommentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CommentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CommentPreviousValuesSubscription>() => T;
}

export interface PoemEdge {
  node: Poem;
  cursor: String;
}

export interface PoemEdgePromise extends Promise<PoemEdge>, Fragmentable {
  node: <T = PoemPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PoemEdgeSubscription
  extends Promise<AsyncIterator<PoemEdge>>,
    Fragmentable {
  node: <T = PoemSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface LikeConnection {
  pageInfo: PageInfo;
  edges: LikeEdge[];
}

export interface LikeConnectionPromise
  extends Promise<LikeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<LikeEdge>>() => T;
  aggregate: <T = AggregateLikePromise>() => T;
}

export interface LikeConnectionSubscription
  extends Promise<AsyncIterator<LikeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<LikeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateLikeSubscription>() => T;
}

export interface LikePreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
}

export interface LikePreviousValuesPromise
  extends Promise<LikePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface LikePreviousValuesSubscription
  extends Promise<AsyncIterator<LikePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface LikeSubscriptionPayload {
  mutation: MutationType;
  node: Like;
  updatedFields: String[];
  previousValues: LikePreviousValues;
}

export interface LikeSubscriptionPayloadPromise
  extends Promise<LikeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = LikePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LikePreviousValuesPromise>() => T;
}

export interface LikeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LikeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LikeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LikePreviousValuesSubscription>() => T;
}

export interface AggregateCategory {
  count: Int;
}

export interface AggregateCategoryPromise
  extends Promise<AggregateCategory>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCategorySubscription
  extends Promise<AsyncIterator<AggregateCategory>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CommentPreviousValues {
  id: ID_Output;
  text: String;
  createdAt?: DateTimeOutput;
}

export interface CommentPreviousValuesPromise
  extends Promise<CommentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface CommentPreviousValuesSubscription
  extends Promise<AsyncIterator<CommentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  text: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CommentEdge {
  node: Comment;
  cursor: String;
}

export interface CommentEdgePromise extends Promise<CommentEdge>, Fragmentable {
  node: <T = CommentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CommentEdgeSubscription
  extends Promise<AsyncIterator<CommentEdge>>,
    Fragmentable {
  node: <T = CommentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateLike {
  count: Int;
}

export interface AggregateLikePromise
  extends Promise<AggregateLike>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLikeSubscription
  extends Promise<AsyncIterator<AggregateLike>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface Category {
  id: ID_Output;
  title: String;
  createdAt: DateTimeOutput;
}

export interface CategoryPromise extends Promise<Category>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface CategorySubscription
  extends Promise<AsyncIterator<Category>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CategoryNullablePromise
  extends Promise<Category | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Category",
    embedded: false
  },
  {
    name: "Poem",
    embedded: false
  },
  {
    name: "Like",
    embedded: false
  },
  {
    name: "Comment",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
