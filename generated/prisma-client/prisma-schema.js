module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.1). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateCategory {
  count: Int!
}

type AggregateComment {
  count: Int!
}

type AggregateLike {
  count: Int!
}

type AggregatePoem {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Category {
  id: ID!
  title: String!
  createdAt: DateTime!
}

type CategoryConnection {
  pageInfo: PageInfo!
  edges: [CategoryEdge]!
  aggregate: AggregateCategory!
}

input CategoryCreateInput {
  id: ID
  title: String!
}

input CategoryCreateManyInput {
  create: [CategoryCreateInput!]
  connect: [CategoryWhereUniqueInput!]
}

type CategoryEdge {
  node: Category!
  cursor: String!
}

enum CategoryOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  createdAt_ASC
  createdAt_DESC
}

type CategoryPreviousValues {
  id: ID!
  title: String!
  createdAt: DateTime!
}

input CategoryScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [CategoryScalarWhereInput!]
  OR: [CategoryScalarWhereInput!]
  NOT: [CategoryScalarWhereInput!]
}

type CategorySubscriptionPayload {
  mutation: MutationType!
  node: Category
  updatedFields: [String!]
  previousValues: CategoryPreviousValues
}

input CategorySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CategoryWhereInput
  AND: [CategorySubscriptionWhereInput!]
  OR: [CategorySubscriptionWhereInput!]
  NOT: [CategorySubscriptionWhereInput!]
}

input CategoryUpdateDataInput {
  title: String
}

input CategoryUpdateInput {
  title: String
}

input CategoryUpdateManyDataInput {
  title: String
}

input CategoryUpdateManyInput {
  create: [CategoryCreateInput!]
  update: [CategoryUpdateWithWhereUniqueNestedInput!]
  upsert: [CategoryUpsertWithWhereUniqueNestedInput!]
  delete: [CategoryWhereUniqueInput!]
  connect: [CategoryWhereUniqueInput!]
  set: [CategoryWhereUniqueInput!]
  disconnect: [CategoryWhereUniqueInput!]
  deleteMany: [CategoryScalarWhereInput!]
  updateMany: [CategoryUpdateManyWithWhereNestedInput!]
}

input CategoryUpdateManyMutationInput {
  title: String
}

input CategoryUpdateManyWithWhereNestedInput {
  where: CategoryScalarWhereInput!
  data: CategoryUpdateManyDataInput!
}

input CategoryUpdateWithWhereUniqueNestedInput {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateDataInput!
}

input CategoryUpsertWithWhereUniqueNestedInput {
  where: CategoryWhereUniqueInput!
  update: CategoryUpdateDataInput!
  create: CategoryCreateInput!
}

input CategoryWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
}

input CategoryWhereUniqueInput {
  id: ID
  title: String
}

type Comment {
  id: ID!
  user: User!
  text: String!
  poem: Poem!
  createdAt: DateTime
  replies(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
}

type CommentConnection {
  pageInfo: PageInfo!
  edges: [CommentEdge]!
  aggregate: AggregateComment!
}

input CommentCreateInput {
  id: ID
  user: UserCreateOneInput!
  text: String!
  poem: PoemCreateOneWithoutCommentsInput!
  replies: CommentCreateManyInput
}

input CommentCreateManyInput {
  create: [CommentCreateInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateManyWithoutPoemInput {
  create: [CommentCreateWithoutPoemInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateWithoutPoemInput {
  id: ID
  user: UserCreateOneInput!
  text: String!
  replies: CommentCreateManyInput
}

type CommentEdge {
  node: Comment!
  cursor: String!
}

enum CommentOrderByInput {
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  createdAt_ASC
  createdAt_DESC
}

type CommentPreviousValues {
  id: ID!
  text: String!
  createdAt: DateTime
}

input CommentScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [CommentScalarWhereInput!]
  OR: [CommentScalarWhereInput!]
  NOT: [CommentScalarWhereInput!]
}

type CommentSubscriptionPayload {
  mutation: MutationType!
  node: Comment
  updatedFields: [String!]
  previousValues: CommentPreviousValues
}

input CommentSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CommentWhereInput
  AND: [CommentSubscriptionWhereInput!]
  OR: [CommentSubscriptionWhereInput!]
  NOT: [CommentSubscriptionWhereInput!]
}

input CommentUpdateDataInput {
  user: UserUpdateOneRequiredInput
  text: String
  poem: PoemUpdateOneRequiredWithoutCommentsInput
  replies: CommentUpdateManyInput
}

input CommentUpdateInput {
  user: UserUpdateOneRequiredInput
  text: String
  poem: PoemUpdateOneRequiredWithoutCommentsInput
  replies: CommentUpdateManyInput
}

input CommentUpdateManyDataInput {
  text: String
}

input CommentUpdateManyInput {
  create: [CommentCreateInput!]
  update: [CommentUpdateWithWhereUniqueNestedInput!]
  upsert: [CommentUpsertWithWhereUniqueNestedInput!]
  delete: [CommentWhereUniqueInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  deleteMany: [CommentScalarWhereInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
}

input CommentUpdateManyMutationInput {
  text: String
}

input CommentUpdateManyWithoutPoemInput {
  create: [CommentCreateWithoutPoemInput!]
  delete: [CommentWhereUniqueInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutPoemInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutPoemInput!]
  deleteMany: [CommentScalarWhereInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
}

input CommentUpdateManyWithWhereNestedInput {
  where: CommentScalarWhereInput!
  data: CommentUpdateManyDataInput!
}

input CommentUpdateWithoutPoemDataInput {
  user: UserUpdateOneRequiredInput
  text: String
  replies: CommentUpdateManyInput
}

input CommentUpdateWithWhereUniqueNestedInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateDataInput!
}

input CommentUpdateWithWhereUniqueWithoutPoemInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutPoemDataInput!
}

input CommentUpsertWithWhereUniqueNestedInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateDataInput!
  create: CommentCreateInput!
}

input CommentUpsertWithWhereUniqueWithoutPoemInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutPoemDataInput!
  create: CommentCreateWithoutPoemInput!
}

input CommentWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  poem: PoemWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  replies_every: CommentWhereInput
  replies_some: CommentWhereInput
  replies_none: CommentWhereInput
  AND: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
}

input CommentWhereUniqueInput {
  id: ID
}

scalar DateTime

type Like {
  id: ID!
  user: User!
  poem: Poem!
  createdAt: DateTime!
}

type LikeConnection {
  pageInfo: PageInfo!
  edges: [LikeEdge]!
  aggregate: AggregateLike!
}

input LikeCreateInput {
  id: ID
  user: UserCreateOneInput!
  poem: PoemCreateOneWithoutLikesInput!
}

input LikeCreateManyWithoutPoemInput {
  create: [LikeCreateWithoutPoemInput!]
  connect: [LikeWhereUniqueInput!]
}

input LikeCreateWithoutPoemInput {
  id: ID
  user: UserCreateOneInput!
}

type LikeEdge {
  node: Like!
  cursor: String!
}

enum LikeOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
}

type LikePreviousValues {
  id: ID!
  createdAt: DateTime!
}

input LikeScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [LikeScalarWhereInput!]
  OR: [LikeScalarWhereInput!]
  NOT: [LikeScalarWhereInput!]
}

type LikeSubscriptionPayload {
  mutation: MutationType!
  node: Like
  updatedFields: [String!]
  previousValues: LikePreviousValues
}

input LikeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LikeWhereInput
  AND: [LikeSubscriptionWhereInput!]
  OR: [LikeSubscriptionWhereInput!]
  NOT: [LikeSubscriptionWhereInput!]
}

input LikeUpdateInput {
  user: UserUpdateOneRequiredInput
  poem: PoemUpdateOneRequiredWithoutLikesInput
}

input LikeUpdateManyWithoutPoemInput {
  create: [LikeCreateWithoutPoemInput!]
  delete: [LikeWhereUniqueInput!]
  connect: [LikeWhereUniqueInput!]
  set: [LikeWhereUniqueInput!]
  disconnect: [LikeWhereUniqueInput!]
  update: [LikeUpdateWithWhereUniqueWithoutPoemInput!]
  upsert: [LikeUpsertWithWhereUniqueWithoutPoemInput!]
  deleteMany: [LikeScalarWhereInput!]
}

input LikeUpdateWithoutPoemDataInput {
  user: UserUpdateOneRequiredInput
}

input LikeUpdateWithWhereUniqueWithoutPoemInput {
  where: LikeWhereUniqueInput!
  data: LikeUpdateWithoutPoemDataInput!
}

input LikeUpsertWithWhereUniqueWithoutPoemInput {
  where: LikeWhereUniqueInput!
  update: LikeUpdateWithoutPoemDataInput!
  create: LikeCreateWithoutPoemInput!
}

input LikeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  poem: PoemWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [LikeWhereInput!]
  OR: [LikeWhereInput!]
  NOT: [LikeWhereInput!]
}

input LikeWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createCategory(data: CategoryCreateInput!): Category!
  updateCategory(data: CategoryUpdateInput!, where: CategoryWhereUniqueInput!): Category
  updateManyCategories(data: CategoryUpdateManyMutationInput!, where: CategoryWhereInput): BatchPayload!
  upsertCategory(where: CategoryWhereUniqueInput!, create: CategoryCreateInput!, update: CategoryUpdateInput!): Category!
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteManyCategories(where: CategoryWhereInput): BatchPayload!
  createComment(data: CommentCreateInput!): Comment!
  updateComment(data: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment
  updateManyComments(data: CommentUpdateManyMutationInput!, where: CommentWhereInput): BatchPayload!
  upsertComment(where: CommentWhereUniqueInput!, create: CommentCreateInput!, update: CommentUpdateInput!): Comment!
  deleteComment(where: CommentWhereUniqueInput!): Comment
  deleteManyComments(where: CommentWhereInput): BatchPayload!
  createLike(data: LikeCreateInput!): Like!
  updateLike(data: LikeUpdateInput!, where: LikeWhereUniqueInput!): Like
  upsertLike(where: LikeWhereUniqueInput!, create: LikeCreateInput!, update: LikeUpdateInput!): Like!
  deleteLike(where: LikeWhereUniqueInput!): Like
  deleteManyLikes(where: LikeWhereInput): BatchPayload!
  createPoem(data: PoemCreateInput!): Poem!
  updatePoem(data: PoemUpdateInput!, where: PoemWhereUniqueInput!): Poem
  updateManyPoems(data: PoemUpdateManyMutationInput!, where: PoemWhereInput): BatchPayload!
  upsertPoem(where: PoemWhereUniqueInput!, create: PoemCreateInput!, update: PoemUpdateInput!): Poem!
  deletePoem(where: PoemWhereUniqueInput!): Poem
  deleteManyPoems(where: PoemWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Poem {
  id: ID!
  title: String!
  verse: [String!]!
  backgroundColor: String
  author: User!
  likes(where: LikeWhereInput, orderBy: LikeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Like!]
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
  createdAt: DateTime!
  published: Boolean!
}

type PoemConnection {
  pageInfo: PageInfo!
  edges: [PoemEdge]!
  aggregate: AggregatePoem!
}

input PoemCreateInput {
  id: ID
  title: String!
  verse: PoemCreateverseInput
  backgroundColor: String
  author: UserCreateOneWithoutPoemsInput!
  likes: LikeCreateManyWithoutPoemInput
  comments: CommentCreateManyWithoutPoemInput
  published: Boolean
}

input PoemCreateManyInput {
  create: [PoemCreateInput!]
  connect: [PoemWhereUniqueInput!]
}

input PoemCreateManyWithoutAuthorInput {
  create: [PoemCreateWithoutAuthorInput!]
  connect: [PoemWhereUniqueInput!]
}

input PoemCreateOneWithoutCommentsInput {
  create: PoemCreateWithoutCommentsInput
  connect: PoemWhereUniqueInput
}

input PoemCreateOneWithoutLikesInput {
  create: PoemCreateWithoutLikesInput
  connect: PoemWhereUniqueInput
}

input PoemCreateverseInput {
  set: [String!]
}

input PoemCreateWithoutAuthorInput {
  id: ID
  title: String!
  verse: PoemCreateverseInput
  backgroundColor: String
  likes: LikeCreateManyWithoutPoemInput
  comments: CommentCreateManyWithoutPoemInput
  published: Boolean
}

input PoemCreateWithoutCommentsInput {
  id: ID
  title: String!
  verse: PoemCreateverseInput
  backgroundColor: String
  author: UserCreateOneWithoutPoemsInput!
  likes: LikeCreateManyWithoutPoemInput
  published: Boolean
}

input PoemCreateWithoutLikesInput {
  id: ID
  title: String!
  verse: PoemCreateverseInput
  backgroundColor: String
  author: UserCreateOneWithoutPoemsInput!
  comments: CommentCreateManyWithoutPoemInput
  published: Boolean
}

type PoemEdge {
  node: Poem!
  cursor: String!
}

enum PoemOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  backgroundColor_ASC
  backgroundColor_DESC
  createdAt_ASC
  createdAt_DESC
  published_ASC
  published_DESC
}

type PoemPreviousValues {
  id: ID!
  title: String!
  verse: [String!]!
  backgroundColor: String
  createdAt: DateTime!
  published: Boolean!
}

input PoemScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  backgroundColor: String
  backgroundColor_not: String
  backgroundColor_in: [String!]
  backgroundColor_not_in: [String!]
  backgroundColor_lt: String
  backgroundColor_lte: String
  backgroundColor_gt: String
  backgroundColor_gte: String
  backgroundColor_contains: String
  backgroundColor_not_contains: String
  backgroundColor_starts_with: String
  backgroundColor_not_starts_with: String
  backgroundColor_ends_with: String
  backgroundColor_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  published: Boolean
  published_not: Boolean
  AND: [PoemScalarWhereInput!]
  OR: [PoemScalarWhereInput!]
  NOT: [PoemScalarWhereInput!]
}

type PoemSubscriptionPayload {
  mutation: MutationType!
  node: Poem
  updatedFields: [String!]
  previousValues: PoemPreviousValues
}

input PoemSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PoemWhereInput
  AND: [PoemSubscriptionWhereInput!]
  OR: [PoemSubscriptionWhereInput!]
  NOT: [PoemSubscriptionWhereInput!]
}

input PoemUpdateDataInput {
  title: String
  verse: PoemUpdateverseInput
  backgroundColor: String
  author: UserUpdateOneRequiredWithoutPoemsInput
  likes: LikeUpdateManyWithoutPoemInput
  comments: CommentUpdateManyWithoutPoemInput
  published: Boolean
}

input PoemUpdateInput {
  title: String
  verse: PoemUpdateverseInput
  backgroundColor: String
  author: UserUpdateOneRequiredWithoutPoemsInput
  likes: LikeUpdateManyWithoutPoemInput
  comments: CommentUpdateManyWithoutPoemInput
  published: Boolean
}

input PoemUpdateManyDataInput {
  title: String
  verse: PoemUpdateverseInput
  backgroundColor: String
  published: Boolean
}

input PoemUpdateManyInput {
  create: [PoemCreateInput!]
  update: [PoemUpdateWithWhereUniqueNestedInput!]
  upsert: [PoemUpsertWithWhereUniqueNestedInput!]
  delete: [PoemWhereUniqueInput!]
  connect: [PoemWhereUniqueInput!]
  set: [PoemWhereUniqueInput!]
  disconnect: [PoemWhereUniqueInput!]
  deleteMany: [PoemScalarWhereInput!]
  updateMany: [PoemUpdateManyWithWhereNestedInput!]
}

input PoemUpdateManyMutationInput {
  title: String
  verse: PoemUpdateverseInput
  backgroundColor: String
  published: Boolean
}

input PoemUpdateManyWithoutAuthorInput {
  create: [PoemCreateWithoutAuthorInput!]
  delete: [PoemWhereUniqueInput!]
  connect: [PoemWhereUniqueInput!]
  set: [PoemWhereUniqueInput!]
  disconnect: [PoemWhereUniqueInput!]
  update: [PoemUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [PoemUpsertWithWhereUniqueWithoutAuthorInput!]
  deleteMany: [PoemScalarWhereInput!]
  updateMany: [PoemUpdateManyWithWhereNestedInput!]
}

input PoemUpdateManyWithWhereNestedInput {
  where: PoemScalarWhereInput!
  data: PoemUpdateManyDataInput!
}

input PoemUpdateOneRequiredWithoutCommentsInput {
  create: PoemCreateWithoutCommentsInput
  update: PoemUpdateWithoutCommentsDataInput
  upsert: PoemUpsertWithoutCommentsInput
  connect: PoemWhereUniqueInput
}

input PoemUpdateOneRequiredWithoutLikesInput {
  create: PoemCreateWithoutLikesInput
  update: PoemUpdateWithoutLikesDataInput
  upsert: PoemUpsertWithoutLikesInput
  connect: PoemWhereUniqueInput
}

input PoemUpdateverseInput {
  set: [String!]
}

input PoemUpdateWithoutAuthorDataInput {
  title: String
  verse: PoemUpdateverseInput
  backgroundColor: String
  likes: LikeUpdateManyWithoutPoemInput
  comments: CommentUpdateManyWithoutPoemInput
  published: Boolean
}

input PoemUpdateWithoutCommentsDataInput {
  title: String
  verse: PoemUpdateverseInput
  backgroundColor: String
  author: UserUpdateOneRequiredWithoutPoemsInput
  likes: LikeUpdateManyWithoutPoemInput
  published: Boolean
}

input PoemUpdateWithoutLikesDataInput {
  title: String
  verse: PoemUpdateverseInput
  backgroundColor: String
  author: UserUpdateOneRequiredWithoutPoemsInput
  comments: CommentUpdateManyWithoutPoemInput
  published: Boolean
}

input PoemUpdateWithWhereUniqueNestedInput {
  where: PoemWhereUniqueInput!
  data: PoemUpdateDataInput!
}

input PoemUpdateWithWhereUniqueWithoutAuthorInput {
  where: PoemWhereUniqueInput!
  data: PoemUpdateWithoutAuthorDataInput!
}

input PoemUpsertWithoutCommentsInput {
  update: PoemUpdateWithoutCommentsDataInput!
  create: PoemCreateWithoutCommentsInput!
}

input PoemUpsertWithoutLikesInput {
  update: PoemUpdateWithoutLikesDataInput!
  create: PoemCreateWithoutLikesInput!
}

input PoemUpsertWithWhereUniqueNestedInput {
  where: PoemWhereUniqueInput!
  update: PoemUpdateDataInput!
  create: PoemCreateInput!
}

input PoemUpsertWithWhereUniqueWithoutAuthorInput {
  where: PoemWhereUniqueInput!
  update: PoemUpdateWithoutAuthorDataInput!
  create: PoemCreateWithoutAuthorInput!
}

input PoemWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  backgroundColor: String
  backgroundColor_not: String
  backgroundColor_in: [String!]
  backgroundColor_not_in: [String!]
  backgroundColor_lt: String
  backgroundColor_lte: String
  backgroundColor_gt: String
  backgroundColor_gte: String
  backgroundColor_contains: String
  backgroundColor_not_contains: String
  backgroundColor_starts_with: String
  backgroundColor_not_starts_with: String
  backgroundColor_ends_with: String
  backgroundColor_not_ends_with: String
  author: UserWhereInput
  likes_every: LikeWhereInput
  likes_some: LikeWhereInput
  likes_none: LikeWhereInput
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  published: Boolean
  published_not: Boolean
  AND: [PoemWhereInput!]
  OR: [PoemWhereInput!]
  NOT: [PoemWhereInput!]
}

input PoemWhereUniqueInput {
  id: ID
}

type Query {
  category(where: CategoryWhereUniqueInput!): Category
  categories(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Category]!
  categoriesConnection(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CategoryConnection!
  comment(where: CommentWhereUniqueInput!): Comment
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment]!
  commentsConnection(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CommentConnection!
  like(where: LikeWhereUniqueInput!): Like
  likes(where: LikeWhereInput, orderBy: LikeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Like]!
  likesConnection(where: LikeWhereInput, orderBy: LikeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LikeConnection!
  poem(where: PoemWhereUniqueInput!): Poem
  poems(where: PoemWhereInput, orderBy: PoemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Poem]!
  poemsConnection(where: PoemWhereInput, orderBy: PoemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PoemConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  category(where: CategorySubscriptionWhereInput): CategorySubscriptionPayload
  comment(where: CommentSubscriptionWhereInput): CommentSubscriptionPayload
  like(where: LikeSubscriptionWhereInput): LikeSubscriptionPayload
  poem(where: PoemSubscriptionWhereInput): PoemSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  email: String!
  password: String!
  authorName: String
  following(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  followers(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  poems(where: PoemWhereInput, orderBy: PoemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Poem!]
  avartar: String
  categories(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Category!]
  liked(where: PoemWhereInput, orderBy: PoemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Poem!]
  bookmarks(where: PoemWhereInput, orderBy: PoemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Poem!]
  createdAt: DateTime
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  email: String!
  password: String!
  authorName: String
  following: UserCreateManyWithoutFollowingInput
  followers: UserCreateManyWithoutFollowersInput
  poems: PoemCreateManyWithoutAuthorInput
  avartar: String
  categories: CategoryCreateManyInput
  liked: PoemCreateManyInput
  bookmarks: PoemCreateManyInput
}

input UserCreateManyWithoutFollowersInput {
  create: [UserCreateWithoutFollowersInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutFollowingInput {
  create: [UserCreateWithoutFollowingInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutPoemsInput {
  create: UserCreateWithoutPoemsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutFollowersInput {
  id: ID
  email: String!
  password: String!
  authorName: String
  following: UserCreateManyWithoutFollowingInput
  poems: PoemCreateManyWithoutAuthorInput
  avartar: String
  categories: CategoryCreateManyInput
  liked: PoemCreateManyInput
  bookmarks: PoemCreateManyInput
}

input UserCreateWithoutFollowingInput {
  id: ID
  email: String!
  password: String!
  authorName: String
  followers: UserCreateManyWithoutFollowersInput
  poems: PoemCreateManyWithoutAuthorInput
  avartar: String
  categories: CategoryCreateManyInput
  liked: PoemCreateManyInput
  bookmarks: PoemCreateManyInput
}

input UserCreateWithoutPoemsInput {
  id: ID
  email: String!
  password: String!
  authorName: String
  following: UserCreateManyWithoutFollowingInput
  followers: UserCreateManyWithoutFollowersInput
  avartar: String
  categories: CategoryCreateManyInput
  liked: PoemCreateManyInput
  bookmarks: PoemCreateManyInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  authorName_ASC
  authorName_DESC
  avartar_ASC
  avartar_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  password: String!
  authorName: String
  avartar: String
  createdAt: DateTime
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  authorName: String
  authorName_not: String
  authorName_in: [String!]
  authorName_not_in: [String!]
  authorName_lt: String
  authorName_lte: String
  authorName_gt: String
  authorName_gte: String
  authorName_contains: String
  authorName_not_contains: String
  authorName_starts_with: String
  authorName_not_starts_with: String
  authorName_ends_with: String
  authorName_not_ends_with: String
  avartar: String
  avartar_not: String
  avartar_in: [String!]
  avartar_not_in: [String!]
  avartar_lt: String
  avartar_lte: String
  avartar_gt: String
  avartar_gte: String
  avartar_contains: String
  avartar_not_contains: String
  avartar_starts_with: String
  avartar_not_starts_with: String
  avartar_ends_with: String
  avartar_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  email: String
  password: String
  authorName: String
  following: UserUpdateManyWithoutFollowingInput
  followers: UserUpdateManyWithoutFollowersInput
  poems: PoemUpdateManyWithoutAuthorInput
  avartar: String
  categories: CategoryUpdateManyInput
  liked: PoemUpdateManyInput
  bookmarks: PoemUpdateManyInput
}

input UserUpdateInput {
  email: String
  password: String
  authorName: String
  following: UserUpdateManyWithoutFollowingInput
  followers: UserUpdateManyWithoutFollowersInput
  poems: PoemUpdateManyWithoutAuthorInput
  avartar: String
  categories: CategoryUpdateManyInput
  liked: PoemUpdateManyInput
  bookmarks: PoemUpdateManyInput
}

input UserUpdateManyDataInput {
  email: String
  password: String
  authorName: String
  avartar: String
}

input UserUpdateManyMutationInput {
  email: String
  password: String
  authorName: String
  avartar: String
}

input UserUpdateManyWithoutFollowersInput {
  create: [UserCreateWithoutFollowersInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutFollowersInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutFollowersInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithoutFollowingInput {
  create: [UserCreateWithoutFollowingInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutFollowingInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutFollowingInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutPoemsInput {
  create: UserCreateWithoutPoemsInput
  update: UserUpdateWithoutPoemsDataInput
  upsert: UserUpsertWithoutPoemsInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutFollowersDataInput {
  email: String
  password: String
  authorName: String
  following: UserUpdateManyWithoutFollowingInput
  poems: PoemUpdateManyWithoutAuthorInput
  avartar: String
  categories: CategoryUpdateManyInput
  liked: PoemUpdateManyInput
  bookmarks: PoemUpdateManyInput
}

input UserUpdateWithoutFollowingDataInput {
  email: String
  password: String
  authorName: String
  followers: UserUpdateManyWithoutFollowersInput
  poems: PoemUpdateManyWithoutAuthorInput
  avartar: String
  categories: CategoryUpdateManyInput
  liked: PoemUpdateManyInput
  bookmarks: PoemUpdateManyInput
}

input UserUpdateWithoutPoemsDataInput {
  email: String
  password: String
  authorName: String
  following: UserUpdateManyWithoutFollowingInput
  followers: UserUpdateManyWithoutFollowersInput
  avartar: String
  categories: CategoryUpdateManyInput
  liked: PoemUpdateManyInput
  bookmarks: PoemUpdateManyInput
}

input UserUpdateWithWhereUniqueWithoutFollowersInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutFollowersDataInput!
}

input UserUpdateWithWhereUniqueWithoutFollowingInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutFollowingDataInput!
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutPoemsInput {
  update: UserUpdateWithoutPoemsDataInput!
  create: UserCreateWithoutPoemsInput!
}

input UserUpsertWithWhereUniqueWithoutFollowersInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutFollowersDataInput!
  create: UserCreateWithoutFollowersInput!
}

input UserUpsertWithWhereUniqueWithoutFollowingInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutFollowingDataInput!
  create: UserCreateWithoutFollowingInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  authorName: String
  authorName_not: String
  authorName_in: [String!]
  authorName_not_in: [String!]
  authorName_lt: String
  authorName_lte: String
  authorName_gt: String
  authorName_gte: String
  authorName_contains: String
  authorName_not_contains: String
  authorName_starts_with: String
  authorName_not_starts_with: String
  authorName_ends_with: String
  authorName_not_ends_with: String
  following_every: UserWhereInput
  following_some: UserWhereInput
  following_none: UserWhereInput
  followers_every: UserWhereInput
  followers_some: UserWhereInput
  followers_none: UserWhereInput
  poems_every: PoemWhereInput
  poems_some: PoemWhereInput
  poems_none: PoemWhereInput
  avartar: String
  avartar_not: String
  avartar_in: [String!]
  avartar_not_in: [String!]
  avartar_lt: String
  avartar_lte: String
  avartar_gt: String
  avartar_gte: String
  avartar_contains: String
  avartar_not_contains: String
  avartar_starts_with: String
  avartar_not_starts_with: String
  avartar_ends_with: String
  avartar_not_ends_with: String
  categories_every: CategoryWhereInput
  categories_some: CategoryWhereInput
  categories_none: CategoryWhereInput
  liked_every: PoemWhereInput
  liked_some: PoemWhereInput
  liked_none: PoemWhereInput
  bookmarks_every: PoemWhereInput
  bookmarks_some: PoemWhereInput
  bookmarks_none: PoemWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
  authorName: String
}
`
      }
    